#!/usr/bin/env node

/**
 * Supabase ÈÖçÁΩÆÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑
 * ‰ΩøÁî®ÊñπÊ≥ï: node setup-cli.js [options]
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

class SupabaseCLI {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        this.config = {
            accessToken: '',
            projectRef: '',
            projectUrl: '',
            anonKey: '',
            serviceRoleKey: ''
        };
    }

    /**
     * ÊòæÁ§∫Ê¨¢Ëøé‰ø°ÊÅØ
     */
    showWelcome() {
        console.log('\nüöÄ Supabase Ëá™Âä®ÈÖçÁΩÆÂ∑•ÂÖ∑');
        console.log('=====================================');
        console.log('‰∏∫Âè§ËØóËØçÊ∏∏ÊàèËá™Âä®ÈÖçÁΩÆ Supabase Êï∞ÊçÆÂ∫ì\n');
    }

    /**
     * ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
     */
    showHelp() {
        console.log('‰ΩøÁî®ÊñπÊ≥ï:');
        console.log('  node setup-cli.js [ÈÄâÈ°π]\n');
        console.log('ÈÄâÈ°π:');
        console.log('  --help, -h     ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ');
        console.log('  --auto         Ëá™Âä®Ê®°ÂºèÔºà‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÔºâ');
        console.log('  --interactive  ‰∫§‰∫íÊ®°ÂºèÔºàÈªòËÆ§Ôºâ');
        console.log('  --config-only  ‰ªÖÁîüÊàêÈÖçÁΩÆÊñá‰ª∂');
        console.log('  --sql-only     ‰ªÖÁîüÊàêSQLËÑöÊú¨\n');
        console.log('ÁéØÂ¢ÉÂèòÈáè:');
        console.log('  SUPABASE_ACCESS_TOKEN  SupabaseËÆøÈóÆ‰ª§Áâå');
        console.log('  SUPABASE_PROJECT_REF   È°πÁõÆÂºïÁî®ID\n');
    }

    /**
     * ËØ¢ÈóÆÁî®Êà∑ËæìÂÖ•
     */
    async askQuestion(question, isPassword = false) {
        return new Promise((resolve) => {
            if (isPassword) {
                // ÈöêËóèÂØÜÁ†ÅËæìÂÖ•
                process.stdout.write(question);
                process.stdin.setRawMode(true);
                process.stdin.resume();
                process.stdin.setEncoding('utf8');
                
                let password = '';
                process.stdin.on('data', function(char) {
                    char = char + '';
                    switch (char) {
                        case '\n':
                        case '\r':
                        case '\u0004':
                            process.stdin.setRawMode(false);
                            process.stdin.pause();
                            console.log('');
                            resolve(password);
                            break;
                        case '\u0003':
                            process.exit();
                            break;
                        default:
                            password += char;
                            process.stdout.write('*');
                            break;
                    }
                });
            } else {
                this.rl.question(question, resolve);
            }
        });
    }

    /**
     * ‰∫§‰∫íÂºèÈÖçÁΩÆ
     */
    async interactiveSetup() {
        console.log('üìù ËØ∑Êèê‰æõ‰ª•‰∏ã‰ø°ÊÅØ:\n');
        
        this.config.accessToken = await this.askQuestion('Supabase Access Token: ', true);
        this.config.projectRef = await this.askQuestion('È°πÁõÆÂºïÁî®ID (Project Reference): ');
        
        if (!this.config.accessToken || !this.config.projectRef) {
            console.log('‚ùå Áº∫Â∞ëÂøÖË¶ÅÁöÑÈÖçÁΩÆ‰ø°ÊÅØ');
            process.exit(1);
        }
        
        this.config.projectUrl = `https://${this.config.projectRef}.supabase.co`;
        
        console.log('\n‚úÖ ÈÖçÁΩÆ‰ø°ÊÅØÊî∂ÈõÜÂÆåÊàê');
    }

    /**
     * Ëá™Âä®Ê®°ÂºèÈÖçÁΩÆ
     */
    autoSetup() {
        this.config.accessToken = process.env.SUPABASE_ACCESS_TOKEN;
        this.config.projectRef = process.env.SUPABASE_PROJECT_REF;
        
        if (!this.config.accessToken || !this.config.projectRef) {
            console.log('‚ùå ËØ∑ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè SUPABASE_ACCESS_TOKEN Âíå SUPABASE_PROJECT_REF');
            process.exit(1);
        }
        
        this.config.projectUrl = `https://${this.config.projectRef}.supabase.co`;
        console.log('‚úÖ ‰ªéÁéØÂ¢ÉÂèòÈáèÂä†ËΩΩÈÖçÁΩÆ');
    }

    /**
     * ÁîüÊàêSQLËÑöÊú¨
     */
    generateSQL() {
        const sql = `-- Supabase Êï∞ÊçÆÂ∫ìÈÖçÁΩÆËÑöÊú¨
-- ÁîüÊàêÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}
-- È°πÁõÆ: ${this.config.projectRef}

-- ÂàõÂª∫Ê∏∏ÊàèÂèçÈ¶àË°®
CREATE TABLE IF NOT EXISTS game_feedback (
    id BIGSERIAL PRIMARY KEY,
    player_name VARCHAR(100),
    contact_info VARCHAR(255),
    suggestions TEXT,
    score INTEGER DEFAULT 0 CHECK (score >= 0),
    accuracy DECIMAL(5,2) DEFAULT 0.00 CHECK (accuracy >= 0 AND accuracy <= 100),
    play_time INTEGER DEFAULT 0 CHECK (play_time >= 0),
    current_level INTEGER DEFAULT 1 CHECK (current_level >= 1),
    max_levels INTEGER DEFAULT 1 CHECK (max_levels >= 1),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    user_agent TEXT,
    screen_resolution VARCHAR(50),
    
    -- Á∫¶ÊùüÊù°‰ª∂
    CONSTRAINT valid_level_progress CHECK (current_level <= max_levels),
    CONSTRAINT valid_contact_or_suggestion CHECK (
        contact_info IS NOT NULL OR suggestions IS NOT NULL
    )
);

-- Ê∑ªÂä†Ë°®Ê≥®Èáä
COMMENT ON TABLE game_feedback IS 'Âè§ËØóËØçÊ∏∏ÊàèÁî®Êà∑ÂèçÈ¶àÊï∞ÊçÆË°®';
COMMENT ON COLUMN game_feedback.player_name IS 'Áé©ÂÆ∂ÂßìÂêç';
COMMENT ON COLUMN game_feedback.contact_info IS 'ËÅîÁ≥ªÊñπÂºèÔºàÈÇÆÁÆ±ÊàñÂæÆ‰ø°Á≠âÔºâ';
COMMENT ON COLUMN game_feedback.suggestions IS 'ÊÑèËßÅÂª∫ËÆÆ';
COMMENT ON COLUMN game_feedback.score IS 'Ê∏∏ÊàèÂæóÂàÜ';
COMMENT ON COLUMN game_feedback.accuracy IS 'Á≠îÈ¢òÂáÜÁ°ÆÁéáÔºàÁôæÂàÜÊØîÔºâ';
COMMENT ON COLUMN game_feedback.play_time IS 'Ê∏∏ÊàèÊó∂ÈïøÔºàÁßíÔºâ';
COMMENT ON COLUMN game_feedback.current_level IS 'ÂΩìÂâçÂÖ≥Âç°';
COMMENT ON COLUMN game_feedback.max_levels IS 'ÊÄªÂÖ≥Âç°Êï∞';

-- ÂêØÁî®Ë°åÁ∫ßÂÆâÂÖ®
ALTER TABLE game_feedback ENABLE ROW LEVEL SECURITY;

-- Âà†Èô§Áé∞ÊúâÁ≠ñÁï•ÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
DROP POLICY IF EXISTS "Allow anonymous insert" ON game_feedback;
DROP POLICY IF EXISTS "Allow read own feedback" ON game_feedback;

-- ÂÖÅËÆ∏ÂåøÂêçÁî®Êà∑ÊèíÂÖ•ÂèçÈ¶à
CREATE POLICY "Allow anonymous insert" ON game_feedback
    FOR INSERT TO anon
    WITH CHECK (true);

-- ÂÖÅËÆ∏ËØªÂèñËá™Â∑±ÁöÑÂèçÈ¶àÔºàÂü∫‰∫é‰ºöËØùÔºâ
CREATE POLICY "Allow read own feedback" ON game_feedback
    FOR SELECT TO anon
    USING (true);

-- ÂàõÂª∫ÊÄßËÉΩ‰ºòÂåñÁ¥¢Âºï
CREATE INDEX IF NOT EXISTS idx_game_feedback_created_at 
    ON game_feedback(created_at DESC);

CREATE INDEX IF NOT EXISTS idx_game_feedback_score 
    ON game_feedback(score DESC);

CREATE INDEX IF NOT EXISTS idx_game_feedback_level 
    ON game_feedback(current_level);

CREATE INDEX IF NOT EXISTS idx_game_feedback_accuracy 
    ON game_feedback(accuracy DESC);

-- ÂàõÂª∫ÂèçÈ¶àÁªüËÆ°ËßÜÂõæ
CREATE OR REPLACE VIEW feedback_stats AS
SELECT 
    COUNT(*) as total_feedback,
    AVG(score) as avg_score,
    MAX(score) as max_score,
    AVG(accuracy) as avg_accuracy,
    AVG(play_time) as avg_play_time,
    AVG(current_level) as avg_level,
    COUNT(DISTINCT DATE(created_at)) as active_days
FROM game_feedback;

-- ÂàõÂª∫Áé©ÂÆ∂ÊéíË°åÊ¶úËßÜÂõæ
CREATE OR REPLACE VIEW player_leaderboard AS
SELECT 
    player_name,
    MAX(score) as best_score,
    MAX(accuracy) as best_accuracy,
    MAX(current_level) as highest_level,
    COUNT(*) as play_count,
    MAX(created_at) as last_played
FROM game_feedback 
WHERE player_name IS NOT NULL AND player_name != ''
GROUP BY player_name
ORDER BY best_score DESC, best_accuracy DESC;

-- ÂàõÂª∫Ê∏∏ÊàèÁªüËÆ°ÂáΩÊï∞
CREATE OR REPLACE FUNCTION get_game_statistics()
RETURNS JSON AS $$
DECLARE
    result JSON;
BEGIN
    SELECT json_build_object(
        'total_players', COUNT(DISTINCT player_name),
        'total_games', COUNT(*),
        'average_score', ROUND(AVG(score), 2),
        'highest_score', MAX(score),
        'average_accuracy', ROUND(AVG(accuracy), 2),
        'average_playtime', ROUND(AVG(play_time), 2),
        'most_reached_level', MAX(current_level),
        'feedback_count', COUNT(*) FILTER (WHERE suggestions IS NOT NULL)
    ) INTO result
    FROM game_feedback;
    
    RETURN result;
END;
$$ LANGUAGE plpgsql;

-- ÊèíÂÖ•ÊµãËØïÊï∞ÊçÆÔºàÂèØÈÄâÔºâ
INSERT INTO game_feedback (
    player_name, 
    contact_info, 
    suggestions, 
    score, 
    accuracy, 
    play_time, 
    current_level, 
    max_levels,
    user_agent,
    screen_resolution
) VALUES (
    'ÊµãËØïÁî®Êà∑',
    'test@example.com',
    'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂèçÈ¶à',
    850,
    85.5,
    300,
    5,
    10,
    'Test User Agent',
    '1920x1080'
) ON CONFLICT DO NOTHING;

-- È™åËØÅÈÖçÁΩÆ
SELECT 'Supabase ÈÖçÁΩÆÂÆåÊàêÔºÅ' as status;
SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_name = 'game_feedback';
SELECT * FROM feedback_stats;
`;

        return sql;
    }

    /**
     * ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂
     */
    generateConfig() {
        // ËøôÈáåÂ∫îËØ•‰ªéAPIËé∑ÂèñÁúüÂÆûÁöÑanon keyÔºå‰ΩÜÂú®CLIÁéØÂ¢É‰∏≠Êàë‰ª¨‰ΩøÁî®Âç†‰ΩçÁ¨¶
        const config = `// Supabase ÈÖçÁΩÆÊñá‰ª∂ - Ëá™Âä®ÁîüÊàê
// ÁîüÊàêÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}
// È°πÁõÆ: ${this.config.projectRef}

const SUPABASE_CONFIG = {
    url: '${this.config.projectUrl}',
    anonKey: 'YOUR_ANON_KEY_HERE', // ËØ∑‰ªé Supabase È°πÁõÆËÆæÁΩÆ‰∏≠Ëé∑Âèñ
    feedbackTable: 'game_feedback'
};

// ÈÖçÁΩÆÈ™åËØÅ
if (typeof window !== 'undefined') {
    console.log('‚úÖ Supabase ÈÖçÁΩÆÂ∑≤Âä†ËΩΩ');
    console.log('üìä È°πÁõÆURL:', SUPABASE_CONFIG.url);
    console.log('üîë ÂåøÂêçÂØÜÈí•Â∑≤ËÆæÁΩÆ');
    
    // ÂºÄÂèëÊ®°ÂºèÊ£ÄÊü•
    if (SUPABASE_CONFIG.anonKey === 'YOUR_ANON_KEY_HERE') {
        console.warn('‚ö†Ô∏è ËØ∑Êõ¥Êñ∞ SUPABASE_CONFIG.anonKey ‰∏∫ÁúüÂÆûÁöÑÂåøÂêçÂØÜÈí•');
    }
}

// ÂØºÂá∫ÈÖçÁΩÆÔºàÊîØÊåÅÂ§öÁßçÊ®°ÂùóÁ≥ªÁªüÔºâ
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SUPABASE_CONFIG;
} else if (typeof window !== 'undefined') {
    window.SUPABASE_CONFIG = SUPABASE_CONFIG;
}`;

        return config;
    }

    /**
     * ‰øùÂ≠òÊñá‰ª∂
     */
    saveFile(filename, content) {
        try {
            fs.writeFileSync(filename, content, 'utf8');
            console.log(`‚úÖ Êñá‰ª∂Â∑≤‰øùÂ≠ò: ${filename}`);
        } catch (error) {
            console.log(`‚ùå ‰øùÂ≠òÊñá‰ª∂Â§±Ë¥•: ${error.message}`);
        }
    }

    /**
     * ÊâßË°åÂÆåÊï¥ÈÖçÁΩÆ
     */
    async executeFullSetup() {
        console.log('\nüîß ÂºÄÂßãÁîüÊàêÈÖçÁΩÆÊñá‰ª∂...\n');
        
        // ÁîüÊàêSQLËÑöÊú¨
        const sql = this.generateSQL();
        this.saveFile('supabase-setup-generated.sql', sql);
        
        // ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂
        const config = this.generateConfig();
        this.saveFile('config-generated.js', config);
        
        // ÁîüÊàê‰ΩøÁî®ËØ¥Êòé
        const readme = this.generateReadme();
        this.saveFile('SETUP-INSTRUCTIONS.md', readme);
        
        console.log('\nüéâ ÈÖçÁΩÆÊñá‰ª∂ÁîüÊàêÂÆåÊàêÔºÅ');
        console.log('\nüìã ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú:');
        console.log('1. Âú® Supabase È°πÁõÆ‰∏≠ÊâßË°å supabase-setup-generated.sql');
        console.log('2. ‰ªéÈ°πÁõÆËÆæÁΩÆ‰∏≠Ëé∑Âèñ anon key');
        console.log('3. Êõ¥Êñ∞ config-generated.js ‰∏≠ÁöÑ anonKey');
        console.log('4. Â∞Ü config-generated.js ÈáçÂëΩÂêç‰∏∫ config.js');
        console.log('5. ÈòÖËØª SETUP-INSTRUCTIONS.md Ëé∑ÂèñËØ¶ÁªÜËØ¥Êòé\n');
    }

    /**
     * ÁîüÊàê‰ΩøÁî®ËØ¥Êòé
     */
    generateReadme() {
        return `# Supabase ÈÖçÁΩÆËØ¥Êòé

## Ëá™Âä®ÁîüÊàê‰ø°ÊÅØ
- ÁîüÊàêÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}
- È°πÁõÆÂºïÁî®: ${this.config.projectRef}
- È°πÁõÆURL: ${this.config.projectUrl}

## ÈÖçÁΩÆÊ≠•È™§

### 1. ÊâßË°åSQLËÑöÊú¨
1. ÁôªÂΩï Supabase ÊéßÂà∂Âè∞
2. ËøõÂÖ•ÊÇ®ÁöÑÈ°πÁõÆ
3. ÊâìÂºÄ SQL Editor
4. Â§çÂà∂Âπ∂ÊâßË°å \`supabase-setup-generated.sql\` ‰∏≠ÁöÑÂÜÖÂÆπ

### 2. Ëé∑ÂèñAPIÂØÜÈí•
1. Âú®È°πÁõÆËÆæÁΩÆ‰∏≠ÊâæÂà∞ "API" ÈÉ®ÂàÜ
2. Â§çÂà∂ "anon public" ÂØÜÈí•
3. Êõ¥Êñ∞ \`config-generated.js\` ‰∏≠ÁöÑ \`anonKey\` Â≠óÊÆµ

### 3. ÈÉ®ÁΩ≤ÈÖçÁΩÆ
1. Â∞Ü \`config-generated.js\` ÈáçÂëΩÂêç‰∏∫ \`config.js\`
2. Á°Æ‰øùÂú®ÊÇ®ÁöÑHTMLÊñá‰ª∂‰∏≠Ê≠£Á°ÆÂºïÁî®ËØ•ÈÖçÁΩÆÊñá‰ª∂

### 4. ÊµãËØïÈÖçÁΩÆ
Âú®ÊµèËßàÂô®ÊéßÂà∂Âè∞‰∏≠ËøêË°å‰ª•‰∏ã‰ª£Á†ÅÊµãËØïËøûÊé•:

\`\`\`javascript
// ÊµãËØïSupabaseËøûÊé•
fetch(SUPABASE_CONFIG.url + '/rest/v1/game_feedback?select=count', {
    headers: {
        'apikey': SUPABASE_CONFIG.anonKey,
        'Authorization': 'Bearer ' + SUPABASE_CONFIG.anonKey
    }
}).then(response => {
    if (response.ok) {
        console.log('‚úÖ Supabase ËøûÊé•ÊàêÂäü');
    } else {
        console.log('‚ùå ËøûÊé•Â§±Ë¥•:', response.status);
    }
});
\`\`\`

## Êï∞ÊçÆË°®ÁªìÊûÑ

### game_feedback Ë°®
- \`id\`: ‰∏ªÈîÆÔºåËá™Â¢û
- \`player_name\`: Áé©ÂÆ∂ÂßìÂêç
- \`contact_info\`: ËÅîÁ≥ªÊñπÂºè
- \`suggestions\`: ÊÑèËßÅÂª∫ËÆÆ
- \`score\`: Ê∏∏ÊàèÂæóÂàÜ
- \`accuracy\`: Á≠îÈ¢òÂáÜÁ°ÆÁéá
- \`play_time\`: Ê∏∏ÊàèÊó∂ÈïøÔºàÁßíÔºâ
- \`current_level\`: ÂΩìÂâçÂÖ≥Âç°
- \`max_levels\`: ÊÄªÂÖ≥Âç°Êï∞
- \`created_at\`: ÂàõÂª∫Êó∂Èó¥
- \`user_agent\`: Áî®Êà∑‰ª£ÁêÜ
- \`screen_resolution\`: Â±èÂπïÂàÜËæ®Áéá

## ÂÆâÂÖ®ÈÖçÁΩÆ
- Â∑≤ÂêØÁî®Ë°åÁ∫ßÂÆâÂÖ®Á≠ñÁï• (RLS)
- ÂÖÅËÆ∏ÂåøÂêçÁî®Êà∑ÊèíÂÖ•ÂíåËØªÂèñÊï∞ÊçÆ
- Êï∞ÊçÆËÆøÈóÆÂèóÂà∞ÈÄÇÂΩìÈôêÂà∂

## ÊÄßËÉΩ‰ºòÂåñ
- Â∑≤ÂàõÂª∫ÂøÖË¶ÅÁöÑÊï∞ÊçÆÂ∫ìÁ¥¢Âºï
- ÂåÖÂê´ÁªüËÆ°ËßÜÂõæÁî®‰∫éÊï∞ÊçÆÂàÜÊûê
- Êèê‰æõÊ∏∏ÊàèÁªüËÆ°ÂáΩÊï∞

## ÊïÖÈöúÊéíÈô§

### Â∏∏ËßÅÈóÆÈ¢ò
1. **ËøûÊé•Â§±Ë¥•**: Ê£ÄÊü•È°πÁõÆURLÂíåAPIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ
2. **ÊùÉÈôêÈîôËØØ**: Á°ÆËÆ§Â∑≤ÂêØÁî®RLSÂπ∂ËÆæÁΩÆÊ≠£Á°ÆÁöÑÁ≠ñÁï•
3. **Êï∞ÊçÆÊèíÂÖ•Â§±Ë¥•**: Ê£ÄÊü•Êï∞ÊçÆÊ†ºÂºèÊòØÂê¶Á¨¶ÂêàË°®ÁªìÊûÑË¶ÅÊ±Ç

### Ëé∑ÂèñÂ∏ÆÂä©
- Êü•Áúã Supabase ÂÆòÊñπÊñáÊ°£
- Ê£ÄÊü•ÊµèËßàÂô®ÊéßÂà∂Âè∞ÁöÑÈîôËØØ‰ø°ÊÅØ
- Á°ÆËÆ§È°πÁõÆÁä∂ÊÄÅÊòØÂê¶Ê≠£Â∏∏

---
ÁîüÊàêÂ∑•ÂÖ∑: Supabase CLI ÈÖçÁΩÆÂô®
`;
    }

    /**
     * ‰∏ªÊâßË°åÂáΩÊï∞
     */
    async run() {
        const args = process.argv.slice(2);
        
        // Â§ÑÁêÜÂëΩ‰ª§Ë°åÂèÇÊï∞
        if (args.includes('--help') || args.includes('-h')) {
            this.showHelp();
            process.exit(0);
        }
        
        this.showWelcome();
        
        if (args.includes('--auto')) {
            this.autoSetup();
        } else {
            await this.interactiveSetup();
        }
        
        if (args.includes('--config-only')) {
            const config = this.generateConfig();
            this.saveFile('config-generated.js', config);
            console.log('‚úÖ ÈÖçÁΩÆÊñá‰ª∂Â∑≤ÁîüÊàê');
        } else if (args.includes('--sql-only')) {
            const sql = this.generateSQL();
            this.saveFile('supabase-setup-generated.sql', sql);
            console.log('‚úÖ SQLËÑöÊú¨Â∑≤ÁîüÊàê');
        } else {
            await this.executeFullSetup();
        }
        
        this.rl.close();
    }
}

// ËøêË°åCLIÂ∑•ÂÖ∑
if (require.main === module) {
    const cli = new SupabaseCLI();
    cli.run().catch(error => {
        console.error('‚ùå ÊâßË°åÂ§±Ë¥•:', error.message);
        process.exit(1);
    });
}

module.exports = SupabaseCLI;