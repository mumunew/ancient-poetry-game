/**
 * Supabase Ëá™Âä®ÈÖçÁΩÆËÑöÊú¨
 * ‰ΩøÁî® Supabase Management API Ëá™Âä®ÂÆåÊàêÊï∞ÊçÆÂ∫ìÈÖçÁΩÆ
 */

class SupabaseAutoConfig {
    constructor() {
        this.baseUrl = 'https://api.supabase.com/v1';
        this.projectRef = null;
        this.accessToken = null;
        this.serviceRoleKey = null;
    }

    /**
     * ÂàùÂßãÂåñÈÖçÁΩÆ
     * @param {string} accessToken - Supabase Access Token
     * @param {string} projectRef - È°πÁõÆÂºïÁî®ID
     */
    async initialize(accessToken, projectRef) {
        this.accessToken = accessToken;
        this.projectRef = projectRef;
        
        console.log('üöÄ ÂºÄÂßãËá™Âä®ÈÖçÁΩÆ Supabase...');
        
        try {
            // Ëé∑ÂèñÈ°πÁõÆ‰ø°ÊÅØ
            await this.getProjectInfo();
            
            // Ëá™Âä®ÂàõÂª∫Êï∞ÊçÆË°®
            await this.createTables();
            
            // ËÆæÁΩÆË°åÁ∫ßÂÆâÂÖ®Á≠ñÁï•
            await this.setupRLS();
            
            // ÂàõÂª∫Á¥¢Âºï
            await this.createIndexes();
            
            // ÂàõÂª∫ËßÜÂõæÂíåÂáΩÊï∞
            await this.createViewsAndFunctions();
            
            // ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂
            await this.generateConfig();
            
            console.log('‚úÖ Supabase Ëá™Âä®ÈÖçÁΩÆÂÆåÊàêÔºÅ');
            return true;
            
        } catch (error) {
            console.error('‚ùå ÈÖçÁΩÆÂ§±Ë¥•:', error.message);
            return false;
        }
    }

    /**
     * Ëé∑ÂèñÈ°πÁõÆ‰ø°ÊÅØ
     */
    async getProjectInfo() {
        console.log('üìã Ëé∑ÂèñÈ°πÁõÆ‰ø°ÊÅØ...');
        
        const response = await this.makeRequest(`/projects/${this.projectRef}`, 'GET');
        
        if (response.status === 'ACTIVE_HEALTHY') {
            console.log('‚úÖ È°πÁõÆÁä∂ÊÄÅÊ≠£Â∏∏');
            this.serviceRoleKey = response.service_role_key;
        } else {
            throw new Error('È°πÁõÆÁä∂ÊÄÅÂºÇÂ∏∏ÔºåËØ∑Ê£ÄÊü•È°πÁõÆÊòØÂê¶Ê≠£Â∏∏ËøêË°å');
        }
    }

    /**
     * Ëá™Âä®ÂàõÂª∫Êï∞ÊçÆË°®
     */
    async createTables() {
        console.log('üóÑÔ∏è ÂàõÂª∫Êï∞ÊçÆË°®...');
        
        const sql = `
            -- ÂàõÂª∫Ê∏∏ÊàèÂèçÈ¶àË°®
            CREATE TABLE IF NOT EXISTS game_feedback (
                id BIGSERIAL PRIMARY KEY,
                player_name VARCHAR(100),
                contact_info VARCHAR(255),
                suggestions TEXT,
                score INTEGER DEFAULT 0 CHECK (score >= 0),
                accuracy DECIMAL(5,2) DEFAULT 0.00 CHECK (accuracy >= 0 AND accuracy <= 100),
                play_time INTEGER DEFAULT 0 CHECK (play_time >= 0),
                current_level INTEGER DEFAULT 1 CHECK (current_level >= 1),
                max_levels INTEGER DEFAULT 1 CHECK (max_levels >= 1),
                created_at TIMESTAMPTZ DEFAULT NOW(),
                user_agent TEXT,
                screen_resolution VARCHAR(50),
                
                -- Á∫¶ÊùüÊù°‰ª∂
                CONSTRAINT valid_level_progress CHECK (current_level <= max_levels),
                CONSTRAINT valid_contact_or_suggestion CHECK (
                    contact_info IS NOT NULL OR suggestions IS NOT NULL
                )
            );

            -- Ê∑ªÂä†Ë°®Ê≥®Èáä
            COMMENT ON TABLE game_feedback IS 'Âè§ËØóËØçÊ∏∏ÊàèÁî®Êà∑ÂèçÈ¶àÊï∞ÊçÆË°®';
            COMMENT ON COLUMN game_feedback.player_name IS 'Áé©ÂÆ∂ÂßìÂêç';
            COMMENT ON COLUMN game_feedback.contact_info IS 'ËÅîÁ≥ªÊñπÂºèÔºàÈÇÆÁÆ±ÊàñÂæÆ‰ø°Á≠âÔºâ';
            COMMENT ON COLUMN game_feedback.suggestions IS 'ÊÑèËßÅÂª∫ËÆÆ';
            COMMENT ON COLUMN game_feedback.score IS 'Ê∏∏ÊàèÂæóÂàÜ';
            COMMENT ON COLUMN game_feedback.accuracy IS 'Á≠îÈ¢òÂáÜÁ°ÆÁéáÔºàÁôæÂàÜÊØîÔºâ';
            COMMENT ON COLUMN game_feedback.play_time IS 'Ê∏∏ÊàèÊó∂ÈïøÔºàÁßíÔºâ';
            COMMENT ON COLUMN game_feedback.current_level IS 'ÂΩìÂâçÂÖ≥Âç°';
            COMMENT ON COLUMN game_feedback.max_levels IS 'ÊÄªÂÖ≥Âç°Êï∞';
        `;

        await this.executeSql(sql);
        console.log('‚úÖ Êï∞ÊçÆË°®ÂàõÂª∫ÂÆåÊàê');
    }

    /**
     * ËÆæÁΩÆË°åÁ∫ßÂÆâÂÖ®Á≠ñÁï•
     */
    async setupRLS() {
        console.log('üîí ËÆæÁΩÆË°åÁ∫ßÂÆâÂÖ®Á≠ñÁï•...');
        
        const sql = `
            -- ÂêØÁî®Ë°åÁ∫ßÂÆâÂÖ®
            ALTER TABLE game_feedback ENABLE ROW LEVEL SECURITY;

            -- Âà†Èô§Áé∞ÊúâÁ≠ñÁï•ÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
            DROP POLICY IF EXISTS "Allow anonymous insert" ON game_feedback;
            DROP POLICY IF EXISTS "Allow read own feedback" ON game_feedback;

            -- ÂÖÅËÆ∏ÂåøÂêçÁî®Êà∑ÊèíÂÖ•ÂèçÈ¶à
            CREATE POLICY "Allow anonymous insert" ON game_feedback
                FOR INSERT TO anon
                WITH CHECK (true);

            -- ÂÖÅËÆ∏ËØªÂèñËá™Â∑±ÁöÑÂèçÈ¶àÔºàÂü∫‰∫é‰ºöËØùÔºâ
            CREATE POLICY "Allow read own feedback" ON game_feedback
                FOR SELECT TO anon
                USING (true);
        `;

        await this.executeSql(sql);
        console.log('‚úÖ Ë°åÁ∫ßÂÆâÂÖ®Á≠ñÁï•ËÆæÁΩÆÂÆåÊàê');
    }

    /**
     * ÂàõÂª∫Á¥¢Âºï
     */
    async createIndexes() {
        console.log('üìà ÂàõÂª∫Êï∞ÊçÆÂ∫ìÁ¥¢Âºï...');
        
        const sql = `
            -- ÂàõÂª∫ÊÄßËÉΩ‰ºòÂåñÁ¥¢Âºï
            CREATE INDEX IF NOT EXISTS idx_game_feedback_created_at 
                ON game_feedback(created_at DESC);
            
            CREATE INDEX IF NOT EXISTS idx_game_feedback_score 
                ON game_feedback(score DESC);
            
            CREATE INDEX IF NOT EXISTS idx_game_feedback_level 
                ON game_feedback(current_level);
            
            CREATE INDEX IF NOT EXISTS idx_game_feedback_accuracy 
                ON game_feedback(accuracy DESC);
        `;

        await this.executeSql(sql);
        console.log('‚úÖ Á¥¢ÂºïÂàõÂª∫ÂÆåÊàê');
    }

    /**
     * ÂàõÂª∫ËßÜÂõæÂíåÂáΩÊï∞
     */
    async createViewsAndFunctions() {
        console.log('üìä ÂàõÂª∫ÁªüËÆ°ËßÜÂõæÂíåÂáΩÊï∞...');
        
        const sql = `
            -- ÂàõÂª∫ÂèçÈ¶àÁªüËÆ°ËßÜÂõæ
            CREATE OR REPLACE VIEW feedback_stats AS
            SELECT 
                COUNT(*) as total_feedback,
                AVG(score) as avg_score,
                MAX(score) as max_score,
                AVG(accuracy) as avg_accuracy,
                AVG(play_time) as avg_play_time,
                AVG(current_level) as avg_level,
                COUNT(DISTINCT DATE(created_at)) as active_days
            FROM game_feedback;

            -- ÂàõÂª∫Áé©ÂÆ∂ÊéíË°åÊ¶úËßÜÂõæ
            CREATE OR REPLACE VIEW player_leaderboard AS
            SELECT 
                player_name,
                MAX(score) as best_score,
                MAX(accuracy) as best_accuracy,
                MAX(current_level) as highest_level,
                COUNT(*) as play_count,
                MAX(created_at) as last_played
            FROM game_feedback 
            WHERE player_name IS NOT NULL AND player_name != ''
            GROUP BY player_name
            ORDER BY best_score DESC, best_accuracy DESC;

            -- ÂàõÂª∫Ê∏∏ÊàèÁªüËÆ°ÂáΩÊï∞
            CREATE OR REPLACE FUNCTION get_game_statistics()
            RETURNS JSON AS $$
            DECLARE
                result JSON;
            BEGIN
                SELECT json_build_object(
                    'total_players', COUNT(DISTINCT player_name),
                    'total_games', COUNT(*),
                    'average_score', ROUND(AVG(score), 2),
                    'highest_score', MAX(score),
                    'average_accuracy', ROUND(AVG(accuracy), 2),
                    'average_playtime', ROUND(AVG(play_time), 2),
                    'most_reached_level', MAX(current_level),
                    'feedback_count', COUNT(*) FILTER (WHERE suggestions IS NOT NULL)
                ) INTO result
                FROM game_feedback;
                
                RETURN result;
            END;
            $$ LANGUAGE plpgsql;
        `;

        await this.executeSql(sql);
        console.log('‚úÖ ÁªüËÆ°ËßÜÂõæÂíåÂáΩÊï∞ÂàõÂª∫ÂÆåÊàê');
    }

    /**
     * ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂
     */
    async generateConfig() {
        console.log('‚öôÔ∏è ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂...');
        
        const projectUrl = `https://${this.projectRef}.supabase.co`;
        const anonKey = await this.getAnonKey();
        
        const configContent = `// Supabase ÈÖçÁΩÆÊñá‰ª∂ - Ëá™Âä®ÁîüÊàê
// ÁîüÊàêÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}

const SUPABASE_CONFIG = {
    url: '${projectUrl}',
    anonKey: '${anonKey}',
    feedbackTable: 'game_feedback'
};

// ÈÖçÁΩÆÈ™åËØÅ
if (typeof window !== 'undefined') {
    console.log('‚úÖ Supabase ÈÖçÁΩÆÂ∑≤Âä†ËΩΩ');
    console.log('üìä È°πÁõÆURL:', SUPABASE_CONFIG.url);
    console.log('üîë ÂåøÂêçÂØÜÈí•Â∑≤ËÆæÁΩÆ');
}

// ÂØºÂá∫ÈÖçÁΩÆÔºàÊîØÊåÅÂ§öÁßçÊ®°ÂùóÁ≥ªÁªüÔºâ
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SUPABASE_CONFIG;
} else if (typeof window !== 'undefined') {
    window.SUPABASE_CONFIG = SUPABASE_CONFIG;
}`;

        // ËøôÈáåÂ∫îËØ•Â∞ÜÈÖçÁΩÆÂÜôÂÖ•Êñá‰ª∂Ôºå‰ΩÜÂú®ÊµèËßàÂô®ÁéØÂ¢É‰∏≠Êàë‰ª¨ËøîÂõûÂÜÖÂÆπ
        console.log('‚úÖ ÈÖçÁΩÆÊñá‰ª∂ÁîüÊàêÂÆåÊàê');
        console.log('üìã ËØ∑Â∞Ü‰ª•‰∏ãÂÜÖÂÆπ‰øùÂ≠òÂà∞ config.js Êñá‰ª∂Ôºö');
        console.log(configContent);
        
        return configContent;
    }

    /**
     * Ëé∑ÂèñÂåøÂêçÂØÜÈí•
     */
    async getAnonKey() {
        const response = await this.makeRequest(`/projects/${this.projectRef}/api-keys`, 'GET');
        return response.find(key => key.name === 'anon')?.api_key;
    }

    /**
     * ÊâßË°åSQLËØ≠Âè•
     */
    async executeSql(sql) {
        const response = await fetch(`https://${this.projectRef}.supabase.co/rest/v1/rpc/exec_sql`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.serviceRoleKey}`,
                'apikey': this.serviceRoleKey
            },
            body: JSON.stringify({ sql })
        });

        if (!response.ok) {
            // Â¶ÇÊûúÁõ¥Êé•SQLÊâßË°åÂ§±Ë¥•ÔºåÂ∞ùËØï‰ΩøÁî®Management API
            return await this.makeRequest(`/projects/${this.projectRef}/database/query`, 'POST', { query: sql });
        }

        return await response.json();
    }

    /**
     * ÂèëÈÄÅAPIËØ∑Ê±Ç
     */
    async makeRequest(endpoint, method = 'GET', body = null) {
        const url = `${this.baseUrl}${endpoint}`;
        
        const options = {
            method,
            headers: {
                'Authorization': `Bearer ${this.accessToken}`,
                'Content-Type': 'application/json'
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        const response = await fetch(url, options);
        
        if (!response.ok) {
            const error = await response.text();
            throw new Error(`APIËØ∑Ê±ÇÂ§±Ë¥•: ${response.status} - ${error}`);
        }

        return await response.json();
    }

    /**
     * È™åËØÅÈÖçÁΩÆ
     */
    async validateSetup() {
        console.log('üîç È™åËØÅÈÖçÁΩÆ...');
        
        try {
            // ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
            const testResponse = await fetch(`https://${this.projectRef}.supabase.co/rest/v1/game_feedback?select=count`, {
                headers: {
                    'Authorization': `Bearer ${this.serviceRoleKey}`,
                    'apikey': this.serviceRoleKey
                }
            });

            if (testResponse.ok) {
                console.log('‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•Ê≠£Â∏∏');
                return true;
            } else {
                console.log('‚ùå Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•');
                return false;
            }
        } catch (error) {
            console.error('‚ùå È™åËØÅÂ§±Ë¥•:', error.message);
            return false;
        }
    }
}

// ‰ΩøÁî®Á§∫‰æã
async function autoSetupSupabase() {
    const config = new SupabaseAutoConfig();
    
    // Ëøô‰∫õÂÄºÈúÄË¶ÅÁî®Êà∑Êèê‰æõ
    const accessToken = prompt('ËØ∑ËæìÂÖ•ÊÇ®ÁöÑ Supabase Access Token:');
    const projectRef = prompt('ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÈ°πÁõÆÂºïÁî®ID (Project Reference):');
    
    if (!accessToken || !projectRef) {
        alert('‚ùå ËØ∑Êèê‰æõÂøÖË¶ÅÁöÑÈÖçÁΩÆ‰ø°ÊÅØ');
        return;
    }
    
    const success = await config.initialize(accessToken, projectRef);
    
    if (success) {
        alert('üéâ Supabase Ëá™Âä®ÈÖçÁΩÆÂÆåÊàêÔºÅËØ∑Êü•ÁúãÊéßÂà∂Âè∞Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ');
    } else {
        alert('‚ùå ÈÖçÁΩÆÂ§±Ë¥•ÔºåËØ∑Êü•ÁúãÊéßÂà∂Âè∞Ëé∑ÂèñÈîôËØØ‰ø°ÊÅØ„ÄÇ');
    }
}

// ÂØºÂá∫Á±ªÂíåÂáΩÊï∞
if (typeof window !== 'undefined') {
    window.SupabaseAutoConfig = SupabaseAutoConfig;
    window.autoSetupSupabase = autoSetupSupabase;
}